Line 2: type_specifier	: INT

int

Line 3: type_specifier	: INT

int

Line 3: declaration_list : ID

d

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int d;

Line 3: statement : var_declaration

int d;

Line 3: statements : statement

int d;

Line 4: type_specifier	: INT

int

Line 4: declaration_list : ID

c

Line 4: var_declaration : type_specifier declaration_list SEMICOLON

int c;

Line 4: statement : var_declaration

int c;

Line 4: statements : statements statement

int d;
int c;

Line 5: type_specifier	: INT

int

Line 5: declaration_list : ID

b

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int b;

Line 5: statement : var_declaration

int b;

Line 5: statements : statements statement

int d;
int c;
int b;

Line 6: variable : ID 

b

Line 6: factor	: CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term :	unary_expression

1

Line 6: simple_expression : term 

1

Line 6: rel_expression	: simple_expression 

1

Line 6: logic_expression : rel_expression

1

Line 6: expression : variable ASSIGNOP logic_expression

b=1

Line 6: expression_statement : expression SEMICOLON 

b=1;

Line 6: statement : expression_statement

b=1;

Line 6: statements : statements statement

int d;
int c;
int b;
b=1;

Line 7: variable : ID 

c

Line 7: factor	: CONST_INT

1

Line 7: unary_expression : factor

1

Line 7: term :	unary_expression

1

Line 7: simple_expression : term 

1

Line 7: rel_expression	: simple_expression 

1

Line 7: logic_expression : rel_expression

1

Line 7: expression : variable ASSIGNOP logic_expression

c=1

Line 7: expression_statement : expression SEMICOLON 

c=1;

Line 7: statement : expression_statement

c=1;

Line 7: statements : statements statement

int d;
int c;
int b;
b=1;
c=1;

Line 8: variable : ID 

b

Line 8: factor	: variable 

b

Line 8: unary_expression : factor

b

Line 8: term :	unary_expression

b

Line 8: simple_expression : term 

b

Line 8: rel_expression	: simple_expression 

b

Line 8: logic_expression : rel_expression

b

Line 8: expression : logic_expression	

b

Line 9: variable : ID 

c

Line 9: factor	: variable 

c

Line 9: unary_expression : factor

c

Line 9: term :	unary_expression

c

Line 9: simple_expression : term 

c

Line 9: rel_expression	: simple_expression 

c

Line 9: logic_expression : rel_expression

c

Line 9: expression : logic_expression	

c

Line 10: variable : ID 

d

Line 10: factor	: CONST_INT

3

Line 10: unary_expression : factor

3

Line 10: term :	unary_expression

3

Line 10: simple_expression : term 

3

Line 10: rel_expression	: simple_expression 

3

Line 10: logic_expression : rel_expression

3

Line 10: expression : variable ASSIGNOP logic_expression

d=3

Line 10: expression_statement : expression SEMICOLON 

d=3;

Line 10: statement : expression_statement

d=3;

Line 10: statements : statement

d=3;

Line 11: compound_statement : LCURL statements RCURL

{
d=3;
}

Line 11: statement : compound_statement

{
d=3;
}

Line 12: variable : ID 

d

Line 12: factor	: CONST_INT

2

Line 12: unary_expression : factor

2

Line 12: term :	unary_expression

2

Line 12: simple_expression : term 

2

Line 12: rel_expression	: simple_expression 

2

Line 12: logic_expression : rel_expression

2

Line 12: expression : variable ASSIGNOP logic_expression

d=2

Line 12: expression_statement : expression SEMICOLON 

d=2;

Line 12: statement : expression_statement

d=2;

Line 12: statements : statement

d=2;

Line 13: compound_statement : LCURL statements RCURL

{
d=2;
}

Line 13: statement : compound_statement

{
d=2;
}

Line 13: statement :  IF LPAREN expression RPAREN statement ELSE statement

if(c)
{
d=3;
}else
{
d=2;
}

Line 13: statements : statement

if(c)
{
d=3;
}else
{
d=2;
}

Line 14: compound_statement : LCURL statements RCURL

{
if(c)
{
d=3;
}else
{
d=2;
}
}

Line 14: statement : compound_statement

{
if(c)
{
d=3;
}else
{
d=2;
}
}

Line 15: variable : ID 

c

Line 15: factor	: variable 

c

Line 15: unary_expression : factor

c

Line 15: term :	unary_expression

c

Line 15: simple_expression : term 

c

Line 15: rel_expression	: simple_expression 

c

Line 15: logic_expression : rel_expression

c

Line 15: expression : logic_expression	

c

Line 16: variable : ID 

d

Line 16: factor	: CONST_INT

1

Line 16: unary_expression : factor

1

Line 16: term :	unary_expression

1

Line 16: simple_expression : term 

1

Line 16: rel_expression	: simple_expression 

1

Line 16: logic_expression : rel_expression

1

Line 16: expression : variable ASSIGNOP logic_expression

d=1

Line 16: expression_statement : expression SEMICOLON 

d=1;

Line 16: statement : expression_statement

d=1;

Line 16: statements : statement

d=1;

Line 17: compound_statement : LCURL statements RCURL

{
d=1;
}

Line 17: statement : compound_statement

{
d=1;
}

Line 18: variable : ID 

d

Line 18: factor	: CONST_INT

0

Line 18: unary_expression : factor

0

Line 18: term :	unary_expression

0

Line 18: simple_expression : term 

0

Line 18: rel_expression	: simple_expression 

0

Line 18: logic_expression : rel_expression

0

Line 18: expression : variable ASSIGNOP logic_expression

d=0

Line 18: expression_statement : expression SEMICOLON 

d=0;

Line 18: statement : expression_statement

d=0;

Line 18: statements : statement

d=0;

Line 19: compound_statement : LCURL statements RCURL

{
d=0;
}

Line 19: statement : compound_statement

{
d=0;
}

Line 19: statement :  IF LPAREN expression RPAREN statement ELSE statement

if(c)
{
d=1;
}else
{
d=0;
}

Line 19: statements : statement

if(c)
{
d=1;
}else
{
d=0;
}

Line 20: compound_statement : LCURL statements RCURL

{
if(c)
{
d=1;
}else
{
d=0;
}
}

Line 20: statement : compound_statement

{
if(c)
{
d=1;
}else
{
d=0;
}
}

Line 20: statement :  IF LPAREN expression RPAREN statement ELSE statement

if(b)
{
if(c)
{
d=3;
}else
{
d=2;
}
}else
{
if(c)
{
d=1;
}else
{
d=0;
}
}

Line 20: statements : statements statement

int d;
int c;
int b;
b=1;
c=1;
if(b)
{
if(c)
{
d=3;
}else
{
d=2;
}
}else
{
if(c)
{
d=1;
}else
{
d=0;
}
}

Line 22: compound_statement : LCURL statements RCURL

{
int d;
int c;
int b;
b=1;
c=1;
if(b)
{
if(c)
{
d=3;
}else
{
d=2;
}
}else
{
if(c)
{
d=1;
}else
{
d=0;
}
}
}

Line 22: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int main(){
int d;
int c;
int b;
b=1;
c=1;
if(b)
{
if(c)
{
d=3;
}else
{
d=2;
}
}else
{
if(c)
{
d=1;
}else
{
d=0;
}
}
}

ScopeTable # 1.1
0 -->  [b : VARIABLE,int, StackEntry: 3] 
1 -->  [c : VARIABLE,int, StackEntry: 2] 
2 -->  [d : VARIABLE,int, StackEntry: 1] 

Line 22: unit : func_definition

int main(){
int d;
int c;
int b;
b=1;
c=1;
if(b)
{
if(c)
{
d=3;
}else
{
d=2;
}
}else
{
if(c)
{
d=1;
}else
{
d=0;
}
}
}

Line 22: program : unit

int main(){
int d;
int c;
int b;
b=1;
c=1;
if(b)
{
if(c)
{
d=3;
}else
{
d=2;
}
}else
{
if(c)
{
d=1;
}else
{
d=0;
}
}
}

ScopeTable # 1
5 -->  [main : FUNCTION,RETURNS int] 

Total Lines : 22
Total Errors : 0
