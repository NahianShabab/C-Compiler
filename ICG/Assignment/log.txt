Line 1: type_specifier	: INT

int

Line 3: type_specifier	: INT

int

Line 3: declaration_list : ID

i

Line 3: declaration_list : declaration_list COMMA ID

i,j

Line 3: declaration_list : declaration_list COMMA ID

i,j,k

Line 3: declaration_list : declaration_list COMMA ID

i,j,k,ll

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k,ll;

Line 3: statement : var_declaration

int i,j,k,ll;

Line 3: statements : statement

int i,j,k,ll;

Line 5: variable : ID 

i

Line 5: factor	: CONST_INT

0

Line 5: unary_expression : factor

0

Line 5: term :	unary_expression

0

Line 5: simple_expression : term 

0

Line 5: rel_expression	: simple_expression 

0

Line 5: logic_expression : rel_expression

0

Line 5: expression : variable ASSIGNOP logic_expression

i=0

Line 5: expression_statement : expression SEMICOLON 

i=0;

Line 5: variable : ID 

i

Line 5: factor	: variable 

i

Line 5: unary_expression : factor

i

Line 5: term :	unary_expression

i

Line 5: simple_expression : term 

i

Line 5: factor	: CONST_INT

6

Line 5: unary_expression : factor

6

Line 5: term :	unary_expression

6

Line 5: simple_expression : term 

6

Line 5: rel_expression	: simple_expression RELOP simple_expression	

i<6

Line 5: logic_expression : rel_expression

i<6

Line 5: expression : logic_expression	

i<6

Line 5: expression_statement : expression SEMICOLON 

i<6;

Line 5: variable : ID 

i

Line 5: factor	: variable INCOP

i++

Line 5: unary_expression : factor

i++

Line 5: term :	unary_expression

i++

Line 5: simple_expression : term 

i++

Line 5: rel_expression	: simple_expression 

i++

Line 5: logic_expression : rel_expression

i++

Line 5: expression : logic_expression	

i++

Line 6: statement :  PRINTLN LPAREN ID RPAREN SEMICOLON

println(i);

Line 6: statements : statement

println(i);

Line 7: compound_statement : LCURL statements RCURL

{
println(i);
}

Line 7: statement : compound_statement

{
println(i);
}

Line 7: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(i=0;i<6;i++)
{
println(i);
}

Line 7: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}

Line 9: variable : ID 

k

Line 9: factor	: CONST_INT

4

Line 9: unary_expression : factor

4

Line 9: term :	unary_expression

4

Line 9: simple_expression : term 

4

Line 9: rel_expression	: simple_expression 

4

Line 9: logic_expression : rel_expression

4

Line 9: expression : variable ASSIGNOP logic_expression

k=4

Line 9: expression_statement : expression SEMICOLON 

k=4;

Line 9: statement : expression_statement

k=4;

Line 9: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;

Line 10: variable : ID 

ll

Line 10: factor	: CONST_INT

6

Line 10: unary_expression : factor

6

Line 10: term :	unary_expression

6

Line 10: simple_expression : term 

6

Line 10: rel_expression	: simple_expression 

6

Line 10: logic_expression : rel_expression

6

Line 10: expression : variable ASSIGNOP logic_expression

ll=6

Line 10: expression_statement : expression SEMICOLON 

ll=6;

Line 10: statement : expression_statement

ll=6;

Line 10: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;

Line 11: variable : ID 

k

Line 11: factor	: variable 

k

Line 11: unary_expression : factor

k

Line 11: term :	unary_expression

k

Line 11: simple_expression : term 

k

Line 11: factor	: CONST_INT

0

Line 11: unary_expression : factor

0

Line 11: term :	unary_expression

0

Line 11: simple_expression : term 

0

Line 11: rel_expression	: simple_expression RELOP simple_expression	

k>0

Line 11: logic_expression : rel_expression

k>0

Line 11: expression : logic_expression	

k>0

Line 12: variable : ID 

ll

Line 12: variable : ID 

ll

Line 12: factor	: variable 

ll

Line 12: unary_expression : factor

ll

Line 12: term :	unary_expression

ll

Line 12: simple_expression : term 

ll

Line 12: factor	: CONST_INT

3

Line 12: unary_expression : factor

3

Line 12: term :	unary_expression

3

Line 12: simple_expression : simple_expression ADDOP term

ll+3

Line 12: rel_expression	: simple_expression 

ll+3

Line 12: logic_expression : rel_expression

ll+3

Line 12: expression : variable ASSIGNOP logic_expression

ll=ll+3

Line 12: expression_statement : expression SEMICOLON 

ll=ll+3;

Line 12: statement : expression_statement

ll=ll+3;

Line 12: statements : statement

ll=ll+3;

Line 13: variable : ID 

k

Line 13: factor	: variable DECOP

k--

Line 13: unary_expression : factor

k--

Line 13: term :	unary_expression

k--

Line 13: simple_expression : term 

k--

Line 13: rel_expression	: simple_expression 

k--

Line 13: logic_expression : rel_expression

k--

Line 13: expression : logic_expression	

k--

Line 13: expression_statement : expression SEMICOLON 

k--;

Line 13: statement : expression_statement

k--;

Line 13: statements : statements statement

ll=ll+3;
k--;

Line 14: compound_statement : LCURL statements RCURL

{
ll=ll+3;
k--;
}

Line 14: statement : compound_statement

{
ll=ll+3;
k--;
}

Line 14: statement :  WHILE LPAREN expression RPAREN statement

while(k>0)
{
ll=ll+3;
k--;
}

Line 14: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}

Line 16: statement :  PRINTLN LPAREN ID RPAREN SEMICOLON

println(ll);

Line 16: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);

Line 17: statement :  PRINTLN LPAREN ID RPAREN SEMICOLON

println(k);

Line 17: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);

Line 19: variable : ID 

k

Line 19: factor	: CONST_INT

4

Line 19: unary_expression : factor

4

Line 19: term :	unary_expression

4

Line 19: simple_expression : term 

4

Line 19: rel_expression	: simple_expression 

4

Line 19: logic_expression : rel_expression

4

Line 19: expression : variable ASSIGNOP logic_expression

k=4

Line 19: expression_statement : expression SEMICOLON 

k=4;

Line 19: statement : expression_statement

k=4;

Line 19: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;

Line 20: variable : ID 

ll

Line 20: factor	: CONST_INT

6

Line 20: unary_expression : factor

6

Line 20: term :	unary_expression

6

Line 20: simple_expression : term 

6

Line 20: rel_expression	: simple_expression 

6

Line 20: logic_expression : rel_expression

6

Line 20: expression : variable ASSIGNOP logic_expression

ll=6

Line 20: expression_statement : expression SEMICOLON 

ll=6;

Line 20: statement : expression_statement

ll=6;

Line 20: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;

Line 22: variable : ID 

k

Line 22: factor	: variable DECOP

k--

Line 22: unary_expression : factor

k--

Line 22: term :	unary_expression

k--

Line 22: simple_expression : term 

k--

Line 22: rel_expression	: simple_expression 

k--

Line 22: logic_expression : rel_expression

k--

Line 22: expression : logic_expression	

k--

Line 23: variable : ID 

ll

Line 23: variable : ID 

ll

Line 23: factor	: variable 

ll

Line 23: unary_expression : factor

ll

Line 23: term :	unary_expression

ll

Line 23: simple_expression : term 

ll

Line 23: factor	: CONST_INT

3

Line 23: unary_expression : factor

3

Line 23: term :	unary_expression

3

Line 23: simple_expression : simple_expression ADDOP term

ll+3

Line 23: rel_expression	: simple_expression 

ll+3

Line 23: logic_expression : rel_expression

ll+3

Line 23: expression : variable ASSIGNOP logic_expression

ll=ll+3

Line 23: expression_statement : expression SEMICOLON 

ll=ll+3;

Line 23: statement : expression_statement

ll=ll+3;

Line 23: statements : statement

ll=ll+3;

Line 24: compound_statement : LCURL statements RCURL

{
ll=ll+3;
}

Line 24: statement : compound_statement

{
ll=ll+3;
}

Line 24: statement :  WHILE LPAREN expression RPAREN statement

while(k--)
{
ll=ll+3;
}

Line 24: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}

Line 26: statement :  PRINTLN LPAREN ID RPAREN SEMICOLON

println(ll);

Line 26: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);

Line 27: statement :  PRINTLN LPAREN ID RPAREN SEMICOLON

println(k);

Line 27: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);
println(k);

Line 30: factor	: CONST_INT

0

Line 30: unary_expression : factor

0

Line 30: term :	unary_expression

0

Line 30: simple_expression : term 

0

Line 30: rel_expression	: simple_expression 

0

Line 30: logic_expression : rel_expression

0

Line 30: expression : logic_expression	

0

Line 30: statement : RETURN expression SEMICOLON

return 0;

Line 30: statements : statements statement

int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);
println(k);
return 0;

Line 31: compound_statement : LCURL statements RCURL

{
int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);
println(k);
return 0;
}

Line 31: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int main(){
int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);
println(k);
return 0;
}

ScopeTable # 1.1
0 -->  [i : VARIABLE,int, StackEntry: 1]
1 -->  [j : VARIABLE,int, StackEntry: 2]
2 -->  [ll : VARIABLE,int, StackEntry: 4] [k : VARIABLE,int, StackEntry: 3]

Line 31: unit : func_definition

int main(){
int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);
println(k);
return 0;
}

Line 31: program : unit

int main(){
int i,j,k,ll;
for(i=0;i<6;i++)
{
println(i);
}
k=4;
ll=6;
while(k>0)
{
ll=ll+3;
k--;
}
println(ll);
println(k);
k=4;
ll=6;
while(k--)
{
ll=ll+3;
}
println(ll);
println(k);
return 0;
}

ScopeTable # 1
5 -->  [main : FUNCTION,RETURNS int] 

Total Lines : 32
Total Errors : 0
