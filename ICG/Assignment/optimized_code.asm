.MODEL SMALL
.STACK 100H

.DATA

.CODE

PRINTLN PROC 
    POP BX  ; IP POPPED
    POP AX  ; NUMBER POPPED
    PUSH BX ; IP PUSHED
    CMP AX,0
    JGE POS
    NEG AX
    MOV BX,AX
    MOV AH,2
    MOV DX,'-'
    INT 21H
    MOV AX,BX
POS:
    XOR CX,CX
    MOV BX,10
    MOV DX,0
WHILE_LOOP:
    MOV DX,0
    DIV BX
    INC CX
    PUSH DX
    CMP AX,0
    JE END_WHILE
    JMP WHILE_LOOP
END_WHILE:
    MOV AH,2
TOP:
    POP DX
    ADD DX,'0'
    INT 21H
    LOOP TOP
    MOV DX,0AH
    INT 21H
    MOV DX,0DH
    INT 21H
    RET
PRINTLN ENDP


PRINTCHAR PROC
    POP BX  ; IP POPPED
    POP AX  ; NUMBER POPPED
    PUSH BX ; IP PUSHED
    MOV DX,AX
    MOV AH,2
    INT 21H
    RET
PRINTCHAR ENDP

main PROC

MOV AX,@DATA
MOV DS,AX
;int i,j,k,ll;
PUSH AX
PUSH AX
PUSH AX
PUSH AX
;0
MOV AX,0
PUSH AX
;i=0
POP AX
MOV BP,SP
MOV [BP+6],AX
L2:
;i
MOV BP,SP
MOV AX,[BP+6]
PUSH AX
;6
MOV AX,6
PUSH AX
;i<6
POP AX
POP BX
CMP BX,AX
JGE L6
PUSH 1
JMP L5
L6: 
PUSH 0
L5: 
POP AX
CMP AX,0
JE L1
JMP L4
L3:
;i++
MOV BP,SP
MOV AX,[BP+6]
MOV BX,AX
INC AX
MOV [BP+6],AX
PUSH BX
POP AX
JMP L2
L4:
;println(i)
MOV BP,SP
MOV AX,[BP+6]
PUSH AX
CALL PRINTLN
JMP L3
L1:
;4
MOV AX,4
PUSH AX
;k=4
POP AX
MOV BP,SP
MOV [BP+2],AX
;6
MOV AX,6
PUSH AX
;ll=6
POP AX
MOV BP,SP
MOV [BP+0],AX
L7: 

;while
;k
MOV BP,SP
MOV AX,[BP+2]
PUSH AX
;0
MOV AX,0
PUSH AX
;k>0
POP AX
POP BX
CMP BX,AX
JLE L10
PUSH 1
JMP L9
L10: 
PUSH 0
L9: 
POP AX
CMP AX,0
JE L8
;ll
MOV BP,SP
MOV AX,[BP+0]
PUSH AX
;3
MOV AX,3
PUSH AX
;ll+3
POP AX
POP BX
ADD AX,BX
PUSH AX
;ll=ll+3
POP AX
MOV BP,SP
MOV [BP+0],AX
;k--
MOV BP,SP
MOV AX,[BP+2]
MOV BX,AX
DEC AX
MOV [BP+2],AX
PUSH BX
POP AX
JMP L7
L8:

;println(ll)
MOV BP,SP
MOV AX,[BP+0]
PUSH AX
CALL PRINTLN
;println(k)
MOV BP,SP
MOV AX,[BP+2]
PUSH AX
CALL PRINTLN
;4
MOV AX,4
PUSH AX
;k=4
POP AX
MOV BP,SP
MOV [BP+2],AX
;6
MOV AX,6
PUSH AX
;ll=6
POP AX
MOV BP,SP
MOV [BP+0],AX
L11: 

;while
;k--
MOV BP,SP
MOV AX,[BP+2]
MOV BX,AX
DEC AX
MOV [BP+2],AX
PUSH BX
POP AX
CMP AX,0
JE L12
;ll
MOV BP,SP
MOV AX,[BP+0]
PUSH AX
;3
MOV AX,3
PUSH AX
;ll+3
POP AX
POP BX
ADD AX,BX
PUSH AX
;ll=ll+3
POP AX
MOV BP,SP
MOV [BP+0],AX
JMP L11
L12:

;println(ll)
MOV BP,SP
MOV AX,[BP+0]
PUSH AX
CALL PRINTLN
;println(k)
MOV BP,SP
MOV AX,[BP+2]
PUSH AX
CALL PRINTLN
;0
MOV AX,0
PUSH AX
;return 0
MOV AX,4CH
INT 21H

main ENDP

END main

